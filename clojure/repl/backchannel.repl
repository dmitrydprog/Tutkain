(ns repl.backchannel
  (:refer-clojure :exclude [send])
  (:require
   [clojure.edn :as edn]
   [cognitect.transcriptor :as xr]
   [tutkain.backchannel :as backchannel]
   [tutkain.socket :as socket])
  (:import
   (java.util.concurrent LinkedBlockingQueue TimeUnit)))

(def recvq (LinkedBlockingQueue.))
(def backchannel (backchannel/open {:port 1337}))
(xr/on-exit #(.close backchannel))
(.setSoTimeout (.socket backchannel) 1000)
(def port (-> backchannel .getLocalAddress .getPort))
(def sendq (socket/client :host "localhost" :port port :recvq recvq))
(xr/on-exit #(.put sendq ::socket/quit))

(defn send
  [message]
  (.put sendq message))

(defn recv
  []
  (-> recvq (.poll 1 TimeUnit/SECONDS) edn/read-string))

(send {:op :echo})
(recv)
(xr/check! #{{:op :echo}})
