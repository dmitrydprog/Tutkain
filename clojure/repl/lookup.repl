(ns repl.lookup
  (:require
   [cognitect.transcriptor :as xr]
   [tutkain.repl.runtime.lookup :refer [lookup]]
   [tutkain.repl.runtime.lookup.specs :as specs]))

(def syms
  (mapcat (fn [[alias ns]]
            (map #(vector alias %) (map first (ns-publics ns))))
    (ns-aliases *ns*)))

(map (fn [[alias sym]] (lookup *ns* (symbol (str alias "/" sym)))) syms)
(xr/check! ::specs/infos)

(map #(lookup *ns* %) (map first (ns-refers *ns*)))
(xr/check! ::specs/infos)

(map #(lookup 'clojure.main %) (map first (ns-publics 'clojure.main)))
(xr/check! ::specs/infos)

(lookup 'clojure.core 'let)
(xr/check! ::specs/info)

(lookup 'clojure.core :clojure.core.specs.alpha/binding-form)
(xr/check! ::specs/info)

(require '[clojure.core.specs.alpha :as core.specs])
(lookup 'user ::core.specs/local-name)
(xr/check! ::specs/info)

(require '[clojure.spec.alpha :as spec])
(lookup 'user 'clojure.spec.alpha)
(xr/check! (spec/keys :req-un [::specs/name ::specs/doc ::specs/file ::specs/column ::specs/line]))
